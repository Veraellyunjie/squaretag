#!/usr/bin/perl

use strict;
use warnings;
use Pod::Usage qw(pod2usage);
use Scalar::Util qw(looks_like_number);
use Getopt::Long
  qw(GetOptionsFromArray :config bundling no_ignore_case no_getopt_compat require_order);
use File::Spec::Functions qw(no_upwards catfile);

( my $app = $0 ) =~ s;.*/;;;

if ( !caller ) {
    run(@ARGV);
    exit 0;
}

sub run {

    my %options =
      ( separator => ',', read_configfile("$ENV{HOME}/.squaretagrc") );

    GetOptionsFromArray( \@_, \%options, 'separator|s=s', 'recursive|r!' )
      or pod2usage();

    my $mode = shift;

    my @rename_opts = qw(verbose|v! dry-run|n! force|f!);

    my %modes = (
        add => {
            cmd => sub {
                my $options = shift;
                rename_files( $options, add_tags( $options, @_ ) );
            },
            minargs  => 1,
            opt_spec => \@rename_opts,
            check    => [ \&is_tag_file, \&check_tags ],
        },
        remove => {
            cmd => sub {
                my $options = shift;
                rename_files( $options, remove_tags( $options, @_ ) );
            },
            minargs  => 1,
            opt_spec => \@rename_opts,
            check    => [ \&is_tag_file, \&check_tags ],
            alias    => [ 'rm', 'delete', 'del' ],
        },
        rename => {
            cmd => sub {
                my $options = shift;
                rename_files( $options, rename_tag( $options, @_ ) );
            },
            minargs  => 2,
            opt_spec => \@rename_opts,
            check =>
              [ \&is_tag_file, sub { check_tags( shift, "$_[0],$_[1]" ) } ],
            alias => ['mv'],
        },
        clear => {
            cmd      => sub { rename_files( shift, clear(@_) ) },
            minargs  => 0,
            opt_spec => \@rename_opts,
        },
        search => {
            cmd      => sub { print $_, "\n" for @{ search_tags(@_) } },
            opt_spec => ['implicit|I=s'],
            minargs  => 0
        },
        untagged => {
            cmd     => sub { shift; print $_, "\n" for @{ find_untagged(@_) } },
            minargs => 0
        },
        list => {
            cmd     => sub { print_tag_list( list_tags(@_) ) },
            minargs => 0
        },
    );

    for my $mode ( values %modes ) {
        if ( my $aliases = $mode->{alias} ) {
            for my $alias (@$aliases) {
                if ( !exists $modes{$alias} ) {
                    $modes{$alias} = $mode;
                }
            }
        }
    }

    if ( $mode && $modes{$mode} ) {
        my $cmd     = $modes{$mode}->{cmd};
        my $minargs = $modes{$mode}->{minargs};

        if ( defined $minargs && @_ < $minargs ) {
            pod2usage(1);
        }

        my $opt_spec = $modes{$mode}->{opt_spec};

        if ($opt_spec) {
            GetOptionsFromArray( \@_, \%options, @$opt_spec )
              or pod2usage(1);
        }

        if ( my $checks = $modes{$mode}->{check} ) {
            for my $check (@$checks) {
                $check->( \%options, @_ );
            }
        }

        $cmd->( \%options, @_ );
    }
    else {
        pod2usage(1);
    }
    return;
}

sub file_iterator {
    my ( $recursive, @files ) = @_;
    if ( !@files ) {
        push @files, '.';
    }
    return sub {
      FILE:
        while ( my $file = shift @files ) {
            if ( -d $file ) {
                if ($recursive) {
                    opendir( my $dh, $file )
                      or die "Can't recurise into $file\n";
                    my @new_files = no_upwards( readdir($dh) );
                    unshift @files,
                      sort map { catfile( $file, $_ ) } @new_files;
                }
                next FILE;
            }

            # TODO handle symlink loops
            return $file;
        }
        return;
    };
}

sub add_tags    { modify( shift, shift, '+', @_ ) }
sub remove_tags { modify( shift, shift, '-', @_ ) }

sub is_tag_file {
    my ( $options, $tag ) = @_;
    pod2usage( -msg => 'Tag is also a file.', -exit => 1 )
      if -e $tag && !$options->{force};
}

sub check_tags {
    my ( $options, $tags ) = @_;
    my $sep = $options->{separator} || ',';
    for my $tag ( split( $sep, $tags ) ) {
        next if $tag =~ /^\s*$/;
        if ( $tag !~ /^\w+(?:=.+)?[+-]?$/ ) {
            pod2usage( -msg => "Invalid tag $tag.", -exit => 1 );
        }
    }
    return;
}

sub print_tag_list {
    my ($tags) = @_;
    print $_, " ", $tags->{$_}, "\n" for sort keys %$tags;
}

sub rename_files {
    my ( $options, $ops ) = @_;
    for my $op (@$ops) {
        my ( $old, $new ) = @$op;
        next if $old eq $new;
        if ( !-e $old && !-l $old ) {
            warn "Skip missing file $old.\n";
            next;
        }
        if ( -e $new || -l $new ) {
            warn "Skip moving $old to $new: File already exists.\n";
            next;
        }
        if ( $options->{'dry-run'} || $options->{verbose} ) {
            print "$old -> $new\n";
            next if $options->{'dry-run'};
        }
        rename $old, $new
          or warn "Can't move $old to $new: $!\n";
    }
    return;
}

sub modify {
    my $options = ref $_[0] eq 'HASH' ? shift : {};
    my ( $tag_spec, $default, @files ) = @_;
    my ( @add, @remove );

    $default ||= '+';
    my $sep = $options->{separator} || ',';

    for ( split( $sep, $tag_spec ) ) {
        next if /^\s*$/;
        if (/^(.+)-$/) {
            push @remove, $1;
        }
        elsif (/^(.+)\+$/) {
            push @add, $1;
        }
        elsif ( $default eq '+' ) {
            push @add, $_;
        }
        elsif ( $default eq '-' ) {
            push @remove, $_;
        }
    }

    if ( !@add && !@remove ) {
        return [];
    }

    my @ops;

    my $iter = file_iterator( $options->{recursive}, @files );

  FILE:
    while ( my $file = $iter->() ) {
        my ( $base, $tags, $ext ) = split_file($file);

        my @tags = split( $sep, $tags );

        if ( !@tags and !@add ) {
            next FILE;
        }

        push @tags, @add;
        my %tags;
        for my $tag (@tags) {
            my ( $key, $val ) = split( /=/, $tag, 2 );
            $tags{$key} = $val;
        }

        for my $tag (@remove) {
            my ( $key, $val ) = split( /=/, $tag, 2 );
            if ( defined $val ) {
                if ( defined $tags{$key} and $tags{$key} eq $val ) {
                    delete $tags{$key};
                }
            }
            delete $tags{$tag};
        }
        @tags = sort keys %tags;

        my $new_file;
        if (@tags) {
            @tags     = map { defined $tags{$_} ? "$_=$tags{$_}" : $_ } @tags;
            $new_file = "$base\[" . join( $sep, @tags ) . "\]$ext";
        }
        else {
            $new_file = "$base$ext";
        }

        next if $file eq $new_file;

        push @ops, [ $file, $new_file ];
    }
    return \@ops;
}

sub clear {
    my $options = ref $_[0] eq 'HASH' ? shift : {};
    my (@files) = @_;
    my @ops;
    my $iter = file_iterator( $options->{recursive}, @files );
    while ( my $file = $iter->() ) {
        my ( $base, $tags, $ext ) = split_file($file);
        my $new_file = "$base$ext";
        push @ops, [ $file, $new_file ];
    }
    return \@ops;
}

sub find_untagged {
    my $options = ref $_[0] eq 'HASH' ? shift : {};
    my @files   = @_;
    my $iter    = file_iterator( $options->{recursive}, @files );
    my @found;
    while ( my $file = $iter->() ) {
        my ( $base, $tags, $ext ) = split_file($file);
        if ( !$tags ) {
            push @found, $file;
        }
    }
    return \@found;
}

sub search_tags {
    my $options = ref $_[0] eq 'HASH' ? shift : {};
    my ( $tag_spec, @files ) = @_;
    my $sep         = $options->{separator} || ',';
    my $implicit_re = $options->{implicit};
    my @found;
    my $check = compile_search($tag_spec);
    my $iter  = file_iterator( $options->{recursive}, @files );
  FILE:

    while ( my $file = $iter->() ) {
        my ( $base, $tags, $ext ) = split_file($file);

        my ( %tags, %properties );

        $properties{tagged} = 1 if $tags;

        if ( $implicit_re && "$base.$ext" =~ /$implicit_re/o ) {
            $properties{implicit} = 1;
            %tags = %+;
        }

        my @tags = split( $sep, $tags );
        for my $tag (@tags) {
            my ( $key, $val ) = split( /=/, $tag, 2 );
            $tags{$key} = $val;
        }
        push @found, $file if $check->( \%tags, \%properties );
    }
    return \@found;
}

sub compile_search {
    my $search = shift;
    my $code   = 'sub { my ($tags,$properties) = @_;';
    while (1) {
        if ( $search =~ /\G ( && | \|\| | \( | \) | ! )/gcx ) {
            $code .= $1;
        }
        elsif ( $search =~ /\G (implicit|tagged)\(\) /gcx ) {
            $code .= qq{ \$properties->{$1} };
        }
        elsif ( $search =~ /\G (\w+) \s* (<|>|=|~) \s* $/gcx ) {
            die "No operand on right side of $1.\n";
        }
        elsif ( $search =~ /\G (\w+) \s* = \s* (\w+)/gcx ) {
            $code .= qq{ defined \$tags->{$1} && } . qq{\$tags->{$1} eq "$2"};
        }
        elsif ( $search =~ /\G (\w+) \s* ~ \s* (\w+)/gcx ) {
            $code .=
              qq{ defined \$tags->{$1} && index(\$tags->{$1},"$2") != -1 };
        }
        elsif ( $search =~ /\G (\w+) \s* (<|>) \s* ([^0-9]+)/gcx ) {
            die "Operand $3 isn't numeric in numerical comparison.\n";
        }
        elsif ( $search =~ /\G (\w+) \s* (=|<|>) \s* ([0-9]+)/gcx ) {
            $code .= qq{ defined \$tags->{$1} && \$tags->{$1} $2 "$3"};
        }
        elsif ( $search =~ /\G (\w+) /gcx ) {
            $code .= " exists \$tags->{$1}";
        }
        elsif ( $search =~ /\G \s+ /gcx ) {
            redo;
        }
        elsif ( $search =~ /\G (.)/gcx ) {
            die "Error at $search\n" . ( ' ' x ( 8 + pos($search) ) ) . "^\n";
        }
        else {
            last;
        }
    }
    $code .= '}';
    my $sub = eval $code;
    die "$@" if "$@";
    return $sub;
}

sub list_tags {
    my $options = ref $_[0] eq 'HASH' ? shift : {};
    my (@files) = @_;
    my $sep     = $options->{separator} || ',';
    my %tags;
    my $iter = file_iterator( $options->{recursive}, @files );
    while ( my $file = $iter->() ) {
        my ( $base, $tags, $ext ) = split_file($file);
        my @tags = split( $sep, $tags );
        $tags{$_}++ for @tags;
    }
    return \%tags;
}

sub rename_tag {
    my $options = ref $_[0] eq 'HASH' ? shift : {};
    my ( $old, $new, @files ) = @_;
    my $sep = $options->{separator} || ',';
    return [] if $old eq $new;
    my @ops;
    my $iter = file_iterator( $options->{recursive}, @files );
  FILE:
    while ( my $file = $iter->() ) {
        my ( $base, $tags, $ext ) = split_file($file);
        my @tags = split( $sep, $tags );
        my %tags = map { $_ => 1 } @tags;
        if ( exists $tags{$old} ) {
            delete $tags{$old};
            $tags{$new} = 1;
            @tags = sort keys %tags;
            my $new_file = "$base\[" . join( $sep, @tags ) . "\]$ext";
            push @ops, [ $file, $new_file ];
        }
    }
    return \@ops;
}

sub split_file {
    my $file = shift;
    my ( $base, $tags, $ext );
    ( $base, $ext )  = $file =~ m/^(.+?)(\.[^.]*$|$)/;
    ( $base, $tags ) = $base =~ m/^(.*?)(?:\[([^[]*)\]$|$)/;
    if ( !$base ) {
        $base = "[$tags]";
        $tags = '';
    }
    $tags //= '';
    return ( $base, $tags, $ext );
}

sub read_configfile {
    my $file = shift;
    return if !-e $file;
    open( my $fh, '<', $file )
      or die "Can't open configuration file $file: !\n";
    my %config;

    while (<$fh>) {
        chomp;                 # no newline
        s/#.*//;               # no comments
        s/^\s+//;              # no leading white
        s/\s+$//;              # no trailing white
        next unless length;    # anything left?
        my ( $key, $value ) = split( /\s*=\s*/, $_, 2 );
        $value =~ s/^"(.*)"/$1/;
        $config{$key} = $value;
    }
    return %config;
}

1;

__END__

=pod

=for html <a href="https://travis-ci.org/mdom/squaretag"><img src="https://travis-ci.org/mdom/squaretag.svg?branch=master"></a>  <a href='https://coveralls.io/r/mdom/squaretag?branch=master'><img src='https://coveralls.io/repos/mdom/squaretag/badge.png?branch=master' alt='Coverage Status' /></a>

=head1 NAME

squaretag - tag files by using filenames

=head1 SYNOPSIS

  squaretag [-s SEP] [-r] add    [-v] [-n] [-f] TAG [[FILES...]]
  squaretag [-s SEP] [-r] remove [-v] [-n] [-f] TAG [[FILES...]]
  squaretag          [-r] clear  [-v] [-n] [-f] [[FILES...]]
  squaretag [-s SEP] [-r] rename [-v] [-n] [-f] OLD_TAG NEW_TAG [[FILES...]]
  squaretag [-s SEP] [-r] list [[FILES...]]
  squaretag [-s SEP] [-r] search [-I REGEX] SEARCH [[FILES...]]
  squaretag          [-r] untagged [[FILES...]]

=head1 DESCRIPTION

Squaretag helps you to organize your files by tagging them. The tags
are saved in the filename by adding all tags in square brackets either
at the end of the filename or just before the last dot.

=head1 EXAMPLES

Suppose the current directory contains the following files:

  $ squaretag untagged
  picture01.jpg
  picture02

Now you want to add the tag I<family> to all pictures.

  $ squaretag add -v family
  picture01.jpg -> picture01[family].jpg
  picture02 -> picture02[family]

Files can have multiple tags

  $ squaretag add -v myself picture01[family].jpg
  picture01[family].jpg -> picture01[family,myself].jpg

You can rename single tags

  $ squaretag rename -v myself me picture01[family,myself].jpg
  picture01[family,myself].jpg -> picture01[family,me].jpg

Or delete a tag

  $ squaretag remove me -v picture01[family,me].jpg
  picture01[family,me].jpg -> picture01[family].jpg

And what would tags be good for if you couldn't search for them

  $ squaretag search 'family && !me'
  picture02[family]

And if you have enough, you can simple clear all tags

  $ squaretag clear
  picture01[family].jpg -> picture01.jpg
  picture02[family] -> picture02

Tags can also have values:

  $ squaretag add read=2016 book.epub
  $ squaretag search 'read>2010'
  books[read=2016].epub
  $ squaretag search 'read<2010'
  $ squaretag search 'read=2016'
  books[read=2016].epub

=head1 COMMANDS

=over 4

=item add TAG [FILES...]

Add TAG to FILES. TAG is a comma seperated list of tags to add. If
a tag has a suffix of I<-> this tag will be removed from the file.

=item remove TAG [FILES...]

Remove TAG from FILES. TAG is a comma seperated list of tags to remove. If
a tag has a suffix of I<+> this tag will be added to the file.

=item search SPEC [FILES...]

List all FILES that match the search SPEC. SPEC can contain tags and
the usual boolean operators.

For example:

  read && good
  !read || (not_read && prio )

There are four additional operators I<E<lt>>, I<E<gt>>, I<=> and I<~>
to handle tags with values.

The function I<tagged()> returns true if the file has any explicit tags,
I<implicit()> if it has any implicit tags.

=over 4

=item I<=>

Compares if operands are string-equal.

=item I<E<lt>>, I<E<gt>>

Numerical less-than or more-than comparison.

=item I<~>

Checks if left operand contains right operand as substring.

=back

=item clear [FILES...]

Remove all tags from FILES.

=item rename OLD_TAG NEW_TAG [FILES...]

Rename OLD_TAG in NEW_TAG in all FILES.

=item list [FILES...]

List and count all tags for FILES. The tags are sorted in descending
order of frequency.

=item untagged [FILES...]

List all FILES without a tag.

=back

=head1 OPTIONS

=over 4

=item --verbose|-v

Print what squaretag does.

=item --dry-run|-n

Just print which files squaretag would rename without doing it.

=item --force

Ignore warnings about tags that look like files and overwriting existing
files.

=item --separator=SEP|-s=SEP

The string to separate tags. Defaults to I<,>.

=item --recursive|-r

Recurse into subdirectories.

=item --implicit=REGEX|-I=REGEX

Apply regex to the basename of the file without its tags. All matched
capture groups are added as tags with less precedence than the explicit
tags.

For example, if regex is '^(?<author>(.+?),' and the file is called
'Pratchett, Terry - Color of Magic.epub', a tag I<author> with the value
of I<Pratchett> is added.

=back

=head1 CONFIGURATION FILE

squaretag will try to read I<$HOME/.squaretagrc> on startup. Empty lines
are ignored, as is everything after I<#>. Everything else is a key-value
combination separated by a equal sign. All options can be set. Quoting
is optional, except to save trailings whitespace.

  separator = " " # by space!
  force = 1

=head1 RATIONALE

Tagging files in a way that tags are preserved cross-platform or even
cross-filesystem seems to be a hard problem with no clear cut solution.

=head2 Fileformat

Some file formats as mp3 or pdf support saving tags inside the files but there
a a lot (probably most) that don't. And even the former need special programs
to do that.

=head2 Filesystem

Many modern file systems support tags and special meta data streams, but the
tags are most likely lost when you copy files from one file system to the next.

=head2 External database

Keeping the tags in a external database requires a sync step after moving or
deleting files. This is harder than it sounds, you probably need the keep
checksums to reckognize known files after a rename.

=head2 Filename

All filesystems limit the length of the filename, so the number of tags
you can save per file is also limited. And even before you reach the
limit, the filename will be hard to read.

But at least it works for all kinds of files, it not dependent on your file or
operating sytemen is does not need external tools or syncing steps.

=head1 SEE ALSO

L<tmsu|http://tmsu.org/>, L<tagspaces|https://www.tagspaces.org/>

=head1 COPYRIGHT AND LICENSE

Copyright 2016 Mario Domgoergen C<< <mario@domgoergen.com> >>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

=cut
